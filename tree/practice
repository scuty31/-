#include<stdio.h>
#include<stdlib.h>

typedef struct {
	int data;
	struct TreeNode* left, *right;
}TreeNode;

TreeNode* new_node(int key) {
	TreeNode* temp = (TreeNode*)malloc(sizeof(TreeNode));
	temp->data = key;
	temp->left = temp->right = NULL;
	return temp;
}

TreeNode* min_valuenode(TreeNode* root) {
	TreeNode* temp  = root;
	while (temp->left != NULL) {
		temp = temp->left;
	}
	return temp;
}

TreeNode* insert_node(TreeNode* root, int key) {
	if (root == NULL)	return new_node(key);

	if (key < root->data) {
		root->left = insert_node(root->left, key);
	}
	else {
		root->right = insert_node(root->right, key);
	}

	return root;
}

TreeNode* delete_node(TreeNode* root, int key) {
	if (root == NULL)	return root;

	if (key < root->data) {
		root->left = delete_node(root->left, key);
	}
	else if (key > root->data) {
		root->right = delete_node(root->right, key);
	}
	else {
		if (root->left == NULL) {
			TreeNode* temp = root->right;
			free(root);
			return temp;
		}
		else if (root->right == NULL) {
			TreeNode* temp = root->left;
			free(root);
			return temp;
		}

		TreeNode* temp = min_valuenode(root->right);
		root->data = temp->data;
		root->right = delete_node(root->right, temp->data);
	}
	return root;
}

TreeNode* search(TreeNode* node, int key) {
	if (node == NULL) return NULL;
	if (node->data == key)	return node;
	else if (node->data < key) {
		return search(node->left, key);
	}
	else
		return search(node->right, key);
}

void preorder(TreeNode* node) {
	if (node) {
		printf("%d -> ", node->data);
		preorder(node->left);
		preorder(node->right);
	}
}

void inorder(TreeNode* node) {
	if (node) {
		inorder(node->left);
		printf("%d -> ", node->data);
		inorder(node->right);
	}
}

void postorder(TreeNode* node) {
	if (node) {
		postorder(node->left);
		postorder(node->right);
		printf("%d -> ", node->data);
	}
}

//--------------------큐-----------------
#define MAX_QUEUE_SIZE 100
typedef TreeNode* element;
typedef struct { // 큐 타입
	element data[MAX_QUEUE_SIZE];
	int front, rear;
} QueueType;
// 오류 함수
void error(char* message)
{
	fprintf(stderr, "%s\n", message);
	exit(1);
}
// 공백 상태 검출 함수
void init_queue(QueueType* q)
{
	q->front = q->rear = 0;
}
// 공백 상태 검출 함수
int is_empty(QueueType* q)
{
	return (q->front == q->rear);
}
// 포화 상태 검출 함수
int is_full(QueueType* q)
{
	return ((q->rear + 1) % MAX_QUEUE_SIZE == q->front);
}
// 삽입 함수
void enqueue(QueueType* q, element item)
{
	if (is_full(q))
		error("큐가 포화상태입니다");
	q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;
	q->data[q->rear] = item;
}
// 삭제 함수
element dequeue(QueueType* q)
{
	if (is_empty(q))
		error("큐가 공백상태입니다");
	q->front = (q->front + 1) % MAX_QUEUE_SIZE;
	return q->data[q->front];
}
//---------------------------------------
void levelorder(TreeNode* node) {
	QueueType q;

	init_queue(&q);

	if (node == NULL)	return;
	enqueue(&q, node);
	while (!is_empty(&q)) {
		node = dequeue(&q);
		printf("%d -> ", node->data);
		if(node->left)
			enqueue(&q, node->left);
		if(node->right)
			enqueue(&q, node->right);
	}
}

int main() {
	TreeNode* root = NULL;
	TreeNode* tmp = NULL;


	root = insert_node(root, 30);
	root = insert_node(root, 20);
	root = insert_node(root, 10);
	root = insert_node(root, 40);
	root = insert_node(root, 50);
	root = insert_node(root, 60);
	printf("이진 탐색 트리 전위 순회 결과 \n");
	preorder(root);
	printf("\n\n");
	printf("이진 탐색 트리 중위 순회 결과 \n");
	inorder(root);
	printf("\n\n");
	printf("이진 탐색 트리 후위 순회 결과 \n");
	postorder(root);
	printf("\n\n");
	printf("이진 탐색 트리 레벨 순화 결과 \n");
	levelorder(root);
	printf("\n\n");

	if (search(root, 30) != NULL)
		printf("이진 탐색 트리에서 30을 발견함 \n");
	else
		printf("이진 탐색 트리에서 30을 발견못함 \n");
	return 0;
}
